<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>false</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_attm_mysla_sla_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_attm_mysla_sla_request">reporting_assigned_toISNOTEMPTY^reporting_assigned_toVALCHANGES^EQ<item endquery="false" field="reporting_assigned_to" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="reporting_assigned_to" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Update  Report complexity value</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	
	var presentvalue='';
	var cumulative_value = 0;
	var precumulative_value = 0;
	
	var finduser = new GlideRecord('x_attm_mysla_assignee_utilization_for_sla');
	finduser.addQuery('assigned_user', current.reporting_assigned_to.toString());
	finduser.query();
	if(finduser.next())
		{
		var cumulative = new GlideRecord('x_attm_mysla_sla_request');
		cumulative.addEncodedQuery('reporting_assigned_to='+current.reporting_assigned_to.toString());
		cumulative.query();
		//gs.addInfoMessage(gs.getMessage("get Row Count" +cumulative.getRowCount() ));
		while(cumulative.next())
			{
			//gs.addInfoMessage('testing'+cumulative_value );
			var complexityVal = relatevalue(cumulative.complexity.reports_process.getDisplayValue());
			cumulative_value = cumulative_value + parseInt(complexityVal);
		}
		
		finduser.reports_complexity = cumulative_value;
		finduser.update();
		
	}
	else
		{
		finduser.initialize();
		finduser.assigned_user = current.reporting_assigned_to;
		finduser.reports_complexity = relatevalue(current.complexity.reports_process.getDisplayValue());
		finduser.insert();
		
	}
	
// if(current.reporting_assigned_to != previous.reporting_assigned_to)
// 	{
// 	var updateprevioususer = new GlideRecord('x_attm_mysla_assignee_utilization_for_sla');
// 	updateprevioususer.addQuery('assigned_user', previous.reporting_assigned_to.toString());
// 	updateprevioususer.query();
// 	if(updateprevioususer.next())
// 		{
// 		var previouscumulative = new GlideRecord('x_attm_mysla_sla_request');
// 		previouscumulative.addEncodedQuery('reporting_assigned_to='+previous.reporting_assigned_to.toString());
// 		previouscumulative.query();
// 		//gs.addInfoMessage(gs.getMessage("get Row Count" +cumulative.getRowCount() ));
// 		while(previouscumulative.next())
// 			{
// 			//	gs.addInfoMessage('getting Inside'+ PreviouscomplexityVal +'Value'+previous.reporting_assigned_to.getDisplayValue());
			
// 			var PreviouscomplexityVal = relatevalue(previouscumulative.complexity.reports_process.getDisplayValue());
// 			//gs.addInfoMessage('getting Inside'+ previouscumulative.complexity.reports_process.getDisplayValue());
// 			precumulative_value = precumulative_value + parseInt(PreviouscomplexityVal);
// 		}
		
// 		previouscumulative.reports_complexity = precumulative_value;
// 		previouscumulative.update();
		
// 	}
		//}
	
	
	
	
	// to convert the values
	function relatevalue(sla_comp)
	{
		var complexityNum = 0;
		//gs.addInfoMessage(gs.getMessage("In THE FUNCTION TO GET RELATED VALUES")+ sla_comp);
		
		if(sla_comp == 'Bronze')
			complexityNum =  10;
		else if(sla_comp == 'Silver')
			complexityNum = 20;
		else if(sla_comp == 'Gold')
			complexityNum = 50;
		else if(sla_comp == 'Platinum')
			complexityNum = 75;
		
		return complexityNum;
		
	}
	
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>akavaramnikesh@kpmg.com</sys_created_by>
        <sys_created_on>2019-07-17 10:08:26</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>66f128081b727b407a3542edee4bcb38</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>Update  Report complexity value</sys_name>
        <sys_overrides/>
        <sys_package display_value="MySLA" source="x_attm_mysla">a95de98adbf93700ad802ab74b9619be</sys_package>
        <sys_policy/>
        <sys_scope display_value="MySLA">a95de98adbf93700ad802ab74b9619be</sys_scope>
        <sys_update_name>sys_script_66f128081b727b407a3542edee4bcb38</sys_update_name>
        <sys_updated_by>rr141k@att.com</sys_updated_by>
        <sys_updated_on>2019-07-18 22:04:37</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=66f128081b727b407a3542edee4bcb38"/>
</record_update>
